
%code top {
    #include <stdio.h>
    #include "utils.h"
    extern int yylex(void);
}

// Terminals


%debug

%locations

%union {
    int intval;
    char *strval;
}

%token INT
%token VOID
%token IF
%token ELSE
%token WHILE
%token FOR
%token BREAK
%token CONTINUE
%token RETURN
%token <strval>     IDENTITY
%token <strval>     INT_NUMBER

%type <strval> func_def
%type <strval> func_params
%type <strval> func_call
%type <strval> func_args

%type <strval> statement
%type <strval> sentence 

%type <strval> decl_stmt
%type <intval> type_dec
%type <strval> id_list 

%type <strval> return_stmt 
%type <strval> assign_stmt
%type <strval> expr 
%type <strval> factor 

%start func_def

// Precedence and associativity

%left '='
%left OR
%left AND
%left '|'
%left '^'
%left '&'
%left EQ NE
%left '<' '>' LE GE
%left '+' '-'
%left '*' '/' '%'
%left NEG POS '!' '~'

%%

// Grammar rules

func_def
    : type_dec IDENTITY '(' func_params ')' '{' statement '}' { 
        printf("FUNC_DEF\t"); $$ = concat(itoType($1), " ", $2); printf("%s\n", $$); 
        }

func_params
    : type_dec IDENTITY { $$ = concat(itoType($1), " ", $2); }
    | func_params ',' func_params { $$ = concat($1, ",", $3); }
    

func_call
    : IDENTITY '(' func_args ')' ';' { $$ = concat($1, concat("(", $3, ")"), ";"); }

func_args
    : %empty { $$ = 0; }
    | expr { $$ = $1; }
    | func_args ',' expr { $$ = concat($1, ",", $3); }

statement
    : sentence ';'              { printf("---STMT---\t"); printf("%s;\n", $1); $$ = concat($1, " ", ";\n");}
    | statement sentence ';'    { printf("---STMT---\t"); printf("%s;\n", $2); $$ = concat($1, $2, ";\n");}
;

sentence
    : decl_stmt         { $$ = $1; }
    | assign_stmt       { $$ = $1; }
    | return_stmt       { $$ = $1; }
    | func_call         { $$ = $1; }
    | %empty            { $$ = 0; }
;

decl_stmt
    : type_dec id_list  { printf("DECL\t"); $$ = concat(itoType($1), " ", $2); printf("%s\n", $$);}

type_dec
    : INT               { $$ = 1; }
    | VOID              { $$ = 2; }

id_list
    : IDENTITY              { printf("ID\n"); $$ = $1; }
    | assign_stmt           { printf("ID\n"); $$ = $1; }
    | id_list ',' id_list   { printf("ID\n"); $$ = concat($1, ",", $3); printf("%s\n", $$); }

assign_stmt
    : IDENTITY '=' expr  { printf("ASSIGN\t"); $$ = concat($1, "=", $3); printf("%s\n", $$); }

expr
    : expr '+' expr         { printf("ADD\t"); $$ = concat($1, "+", $3); printf("%s\n", $$); }
    | expr '-' expr         { printf("SUB\t"); $$ = concat($1, "-", $3); printf("%s\n", $$); }
    | expr '*' expr         { printf("MUL\t"); $$ = concat($1, "*", $3); printf("%s\n", $$); }
    | expr '/' expr         { printf("DIV\t"); $$ = concat($1, "/", $3); printf("%s\n", $$); }
    | expr '%' expr         { printf("MOD\t"); $$ = concat($1, "%", $3); printf("%s\n", $$); }
    | '(' expr ')'          { printf("PAREN\t"); $$ = concat("(", $2, ")"); printf("%s\n", $$); }
    | '-' expr %prec NEG    { printf("NEG\t"); $$ = concat("-", $2, ""); printf("%s\n", $$); }
    | '+' expr %prec POS    { printf("POS\t"); $$ = concat("+", $2, ""); printf("%s\n", $$); }
    | factor                { $$ = $1;}
    | func_call             { $$ = $1; }

factor
    : INT_NUMBER        { printf("INTEGER \t%s\n", $1);}
    | IDENTITY          { printf("IDENTITY\t%s\n", $1);}

return_stmt
    : RETURN expr       { printf("RETURN\t"); $$ = concat("return", " ", $2); printf("%s\n", $$); }

%%

